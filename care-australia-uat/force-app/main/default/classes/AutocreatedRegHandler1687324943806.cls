//TODO:This autogenerated class includes the basics for a Registration
//Handler class. You will need to customize it to ensure it meets your needs and
//the data provided by the third party.

global class AutocreatedRegHandler1687324943806 implements Auth.RegistrationHandler{
    private static final String DEFAULT_ACCOUNTNAME = label.PartnerAccountName;
    private static final String EXTERNAL_USER_PROFILE =  label.PartnerProfile;
    private static final String INTERNAL_USER_PROFILE = 'Standard User';    
    
    /**
* Let anyone register as long as the required fields are supplied
* 
* We require email, lastName, firstName
* 
* @data - the user's info from the Auth Provider
**/ 
    global boolean canCreateUser(Auth.UserData data) {
        System.debug('canCreateUser was called for ' + data);
        if(data.lastName==null&&data.firstName!=null)
        {
            data.lastName=data.firstName; 
        }
        Boolean retVal = (data != null 
                          && data.email != null
                          && (data.lastName != null||
                              data.firstName != null));
        
        System.debug('data.username='+data.username);
        System.debug('data.email='+data.email);
        System.debug('data.lastName='+data.lastName);
        System.debug('data.firstName='+data.firstName);
        
        return retVal;
    }
    
    /**
* Create the User - A required method to implement the Handler Interface
* 
* @param portalId  - Id of the Community
* @param data - Auth Provider user data describing the User to create
* 
* @return User that has been initialized
**/ 
    global User createUser(Id portalId, Auth.UserData data){
        if(!canCreateUser(data)) {
            // Returning null signals the auth framework we can't create the user
            return null;
        }
        
        
        // Is this a Community Context?
        if(data.attributeMap.containskey('sfdc_networkid')) {
            System.debug('Registering Community user: ' + data.email);
            Id contactId;
            // To keep things modular, we're creating the Contact in a separate method
            contactId = createContact(data);
            System.debug('Created contact: '+ contactId);
            
            // You'd likely use other logic to assign the Profile
            Profile p = [SELECT Id FROM profile WHERE name=:EXTERNAL_USER_PROFILE];
            System.debug('Found profile: '+ p);
            
            // Keeping it modular, we initialize the user in another method
            User u = new User();
            try{
                u = createUser(data,p);
            }catch(Exception e)
            {
                string message = e.getMessage();
                string LinkUrl = System.URL.getSalesforceBaseUrl().toExternalForm();
                if(message.equals('[User already exists.]')){
                    throw new Auth.DiscoveryCustomErrorException ('User Already Exists, please go to login page. ' + LinkUrl );
                }else if(message.equals('[There was an error in registering a user in site [SiteName]. The error message is: portal user already exists for contact]')) {
                    throw new Auth.DiscoveryCustomErrorException('An error occurred, please try logging in or using a different email. You can login at ' + LinkUrl);
                }else if(message.equals('Your password must have a mix of letters and numbers')) {
                    throw new Auth.DiscoveryCustomErrorException (e.getMessage());
                }else if(message.equals('Your password must be at least 12 characters long.')) {
                    throw new Auth.DiscoveryCustomErrorException (e.getMessage());
                }
                else if(message.contains('DUPLICATE_USERNAME')) {
                    throw new Auth.DiscoveryCustomErrorException ('The username already exist. Please try to login with your email address or reset your password.If the issue persist, please contact us');
                }
                /*else if(message.contains('DUPLICATE_EMAIL_DETECTED')) {
throw new Auth.DiscoveryCustomErrorException ('Email address already exists, Please create user with a different email.');
}*/else if(message.contains('DUPLICATES_DETECTED')) {
    throw new Auth.DiscoveryCustomErrorException ('Account already exists, please login or contact us for help.');
}else{
    throw new Auth.DiscoveryCustomErrorException ('Please contact us and give us this error message: ' + e.getMessage());
}
            }
            
            u.contactId = contactId;
            return u;
        } else {
            //This is not a community, so we Assign an internal profile
            Profile p = [SELECT Id FROM profile WHERE name=:INTERNAL_USER_PROFILE];
            System.debug('Found profile: '+ p);
            
            // Keeping it modular, we initialize the user in another method
            User u = createUser(data,p);
            
            return u;
        }
    }
    
    /**
* Update the user
* @param portalId  - Id of the Community
* @param data - Auth Provider user data describing the User to create
**/     
    global void updateUser(Id userId, Id portalId, Auth.UserData data){
        System.debug('Update User called for: ' + data);
        
        User u = new User(id=userId);
        u.email = data.email;
        u.lastName = data.lastName;
        u.firstName = data.firstName;
        update(u);
    }
    /**
* Create a Contact
* 
* @param data - Facebook provided context for the User
**/
    @testvisible
    private Id createContact(Auth.UserData data){
        system.debug('data-->'+data);
        string picture = (string)data.attributeMap.get('picture');
        Contact contact = new Contact();
        contact.LastName = data.lastName;
        contact.FirstName = data.firstName;
        contact.Email = data.email;
        contact.IsLender__c = true;
        contact.Profile_Picture__c = picture;
        string recordTypeId = Schema.Sobjecttype.contact.getRecordTypeInfosByName().get('Supporter').getRecordTypeId();
        contact.RecordTypeId = recordTypeId;
        list<Contact> existingCont =[SELECT Id,Email,FirstName,LastName FROM Contact WHERE Email=:data.email LIMIT 1];
        // set Account Id
        if (data.attributemap.get('accountId') != null){
            contact.accountId = data.attributemap.get('accountId');
        } else {
            List<Account> accounts = [select Id from Account where Name =:DEFAULT_ACCOUNTNAME];
            System.debug('Found account: ' + accounts);
            
            contact.accountId = accounts[0].Id;            
        }
        try{
            if(existingCont.size()>0){
                if(existingCont[0].Email==contact.Email)
                {
                    /*CalloutException e = new CalloutException();
					e.setMessage('DUPLICATE_EMAIL_DETECTED');
					throw e;*/
                    contact.Id= existingCont[0].Id;
                    update contact;
                }  
                
            }
            else
            {
                insert contact;
            }
            
            
            Lender_Balance__c leanderB = new Lender_Balance__c();
            leanderB.Balance__c= 0;
            leanderB.Lender__c = contact.Id;
            leanderB.CurrencyIsoCode = 'VND';
            insert leanderB;
            System.debug('Contact created for ' + data.email + ' id=' + contact.id);
            Cart__c cart = new Cart__c();
            cart.Contact__c = contact.Id;
            insert cart;
            return contact.id; 
        }
        catch(Exception e)
        {
            string message = e.getMessage();
            if(message.contains('DUPLICATE_EMAIL_DETECTED')) 
            {
                throw new Auth.DiscoveryCustomErrorException ('Email address already exists, Please create user with a different email.');
            }
            return null;
        }
        
    }
    
    
    /**
* Create and initialize the User but don't save it yet
* 
* @param data - the provided User context from FaceBook
* @param p - the Profile we are going to assign to this user
* 
* @return User that has been initialized but not Saved
**/ 
    private User createUser(Auth.UserData data, Profile p) {
        User u = new User();
        u.username = data.email;
        u.email = data.email;
        u.lastName = data.lastName;
        u.firstName = data.firstName;
        String alias = data.firstName + data.lastName;
        
        //Alias must be 8 characters or less
        if(alias.length() > 8)
        {
            alias = alias.substring(0, 8);
        }
        u.alias = alias;
        u.languagelocalekey = UserInfo.getLanguage();
        u.localesidkey = UserInfo.getLocale();
        u.emailEncodingKey = 'UTF-8';
        u.timeZoneSidKey = 'America/Los_Angeles';
        u.profileId = p.Id;
        return u;
    } 
}