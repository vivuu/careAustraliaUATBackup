@RestResource(urlMapping='/NBOpportunity/*')
global with sharing class NBOpportunity {
 	
    /**
     * Get an Opportunity by a user's session ID, generated by the Donation Bridge and passed through subsequent session calls.
     * This will return the Payment name of the opportunity or the RG Id (RG_Id__c) field for a recurring donation.
     * Gordon Jackson October 2021 gordon@gordonjackson.org
     */
    @HttpGet
    global static String doGet() {
        RestRequest req = RestContext.request;
        RestResponse res = RestContext.response;
        String sessionId = req.requestURI.substring(req.requestURI.lastIndexOf('/')+1);
        String oppOrRG;
        
        List<npe03__Recurring_Donation__c> oRGResult = [SELECT Id, Name, RG_Id__c FROM npe03__Recurring_Donation__c WHERE Name = :sessionId];
        if ( null != oRGResult ) {
            for (npe03__Recurring_Donation__c oRGFound : oRGResult) {
                // Get the Opportunity Payment Number for return.
                oppOrRG = oRGFound.RG_Id__c;                                  
                break;
            }  
        }
        
        if ( null == oppOrRG ) {
            List<Opportunity> oResult = [SELECT Id, Name FROM Opportunity WHERE Name = :sessionId];
            
            //See if there is a onetime Opportunity
            if ( null != oResult ) {
                for (Opportunity oFound : oResult) {
                    // Get the Opportunity Payment Number for return.
                    List<npe01__OppPayment__c> pResult = [select Id, Name, Payee_Name__c from npe01__OppPayment__c where npe01__Opportunity__c = :oFound.Id];            
                    if ( null != pResult ) {
                        for (npe01__OppPayment__c pFound : pResult) {     
                            System.debug('Payment Found ' + pFound.Name);
                            oppOrRG = pFound.Name;
                            break;
                        }
                    }                                  
                }
            }
        }
        return oppOrRG;
    }
    
    /**
     * Creates the object for the donation based on the payment mode: onetime, monthly.
     * A Payment object should be automatically created with the Opportunity. The Name (Payment Number) of the Payment object is the universal identifier for one-time gifts
     * Regular gifts use RG_Id__c
     * and passed back to the payment gateways.
     * Gordon Jackson October 2021 gordon@gordonjackson.org
     */
    @HttpPost
    global static String doPost(String contact, Decimal amount, String session, String campaign, 
        String paymentMethod, String paymentMode, String formURL, String emailAddress, 
        String firstName, String lastName, String utmSource, String utmCampaign, String utmMedium ) 
    {
        RestRequest req   = RestContext.request;
        RestResponse res  = RestContext.response;
        String resultPaymentName;
        
        Id campaignId = NBOpportunityHelper.getCampaignId(campaign);
        
        if ( 'onetime' == paymentMode ) {        
            resultPaymentName = NBOpportunityHelper.processOneTime(contact, amount, session, campaign, paymentMethod, paymentMode, formURL, emailAddress, firstName, lastName, utmSource, utmCampaign, utmMedium, campaignId);
        }
        else if ( 'monthly' == paymentMode ) {
            resultPaymentName = NBOpportunityHelper.processMonthly(contact, amount, session, campaign, paymentMethod, paymentMode, formURL, emailAddress, firstName, lastName, utmSource, utmCampaign, utmMedium, campaignId);
        }        
        return resultPaymentName;
    }
    
    @HttpPut
    global static String doPut(String contact, Decimal amount, String session, String campaign, 
        String paymentMethod, String paymentMode, String formURL, String emailAddress, 
        String firstName, String lastName, String utmSource, String utmCampaign, String utmMedium, String processedDate, String serviceFee ) 
    {
        RestRequest req   = RestContext.request;
        RestResponse res  = RestContext.response;
        String resultPaymentName;
        
        Id campaignId = NBOpportunityHelper.getCampaignId(campaign);
        
        if ( 'onetime' == paymentMode ) {        
            resultPaymentName = NBOpportunityHelper.processOneTime(contact, amount, session, campaign, paymentMethod, paymentMode, formURL, emailAddress, firstName, lastName, utmSource, utmCampaign, utmMedium, campaignId, processedDate, serviceFee);
        }
        return resultPaymentName;
    }
}