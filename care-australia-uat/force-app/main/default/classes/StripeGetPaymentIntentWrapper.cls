//
//Generated by AdminBooster
//

public class StripeGetPaymentIntentWrapper{
	
	public class Payment_method_details {
		public Card card {get;set;} 
		public String type {get;set;} 

		public Payment_method_details(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'card') {
							card = new Card(parser);
						} else if (text == 'type') {
							type = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Payment_method_details consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String object_Z {get;set;} // in json: object
	public List<Data_Z> data {get;set;} 
	public Boolean has_more {get;set;} 
	public String next_page {get;set;} 
	public String url {get;set;} 

	public StripeGetPaymentIntentWrapper(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'object') {
						object_Z = parser.getText();
					} else if (text == 'data') {
						data = arrayOfData_Z(parser);
					} else if (text == 'has_more') {
						has_more = parser.getBooleanValue();
					} else if (text == 'next_page') {
						next_page = parser.getText();
					} else if (text == 'url') {
						url = parser.getText();
					} else {
						System.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Source {
		public String id {get;set;} 
		public String object_Z {get;set;} // in json: object
		public String brand {get;set;} 
		public String country {get;set;} 
		public String customer {get;set;} 
		public Integer exp_month {get;set;} 
		public Integer exp_year {get;set;} 
		public String fingerprint {get;set;} 
		public String funding {get;set;} 
		public String last4 {get;set;} 
		public String name {get;set;} 
		
		public Source(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'object') {
							object_Z = parser.getText();
						} else if (text == 'brand') {
							brand = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'customer') {
							customer = parser.getText();
						} else if (text == 'exp_month') {
							exp_month = parser.getIntegerValue();
						} else if (text == 'exp_year') {
							exp_year = parser.getIntegerValue();
						} else if (text == 'fingerprint') {
							fingerprint = parser.getText();
						} else if (text == 'funding') {
							funding = parser.getText();
						} else if (text == 'last4') {
							last4 = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Source consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public class Charges {
		public String object_Z {get;set;} // in json: object
		public List<Data> data {get;set;} 
		public Boolean has_more {get;set;} 
		public Integer total_count {get;set;} 
		public String url {get;set;} 

		public Charges(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'object') {
							object_Z = parser.getText();
						} else if (text == 'data') {
							data = arrayOfData(parser);
						} else if (text == 'has_more') {
							has_more = parser.getBooleanValue();
						} else if (text == 'total_count') {
							total_count = parser.getIntegerValue();
						} else if (text == 'url') {
							url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Charges consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Data {
		public String id {get;set;} 
		public String object_Z {get;set;} // in json: object
		public Integer amount {get;set;} 
		public Integer amount_captured {get;set;} 
		public Integer amount_refunded {get;set;} 
		public String balance_transaction {get;set;} 
		public String calculated_statement_descriptor {get;set;} 
		public Boolean captured {get;set;} 
		public Integer created {get;set;} 
		public String currency_Z {get;set;} // in json: currency
		public String customer {get;set;} 
		public String description {get;set;} 
		public Boolean disputed {get;set;} 
		public String invoice {get;set;} 
		public Boolean livemode {get;set;} 
		public Boolean paid {get;set;} 
		public String payment_intent {get;set;} 
		public String payment_method {get;set;} 
		public Payment_method_details payment_method_details {get;set;} 
		public String receipt_url {get;set;} 
		public Boolean refunded {get;set;} 
		public String status {get;set;} 
		
		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'object') {
							object_Z = parser.getText();
						} else if (text == 'amount') {
							amount = parser.getIntegerValue();
						} else if (text == 'amount_captured') {
							amount_captured = parser.getIntegerValue();
						} else if (text == 'amount_refunded') {
							amount_refunded = parser.getIntegerValue();
						} else if (text == 'balance_transaction') {
							balance_transaction = parser.getText();
						} else if (text == 'calculated_statement_descriptor') {
							calculated_statement_descriptor = parser.getText();
						} else if (text == 'captured') {
							captured = parser.getBooleanValue();
						} else if (text == 'created') {
							created = parser.getIntegerValue();
						} else if (text == 'currency') {
							currency_Z = parser.getText();
						} else if (text == 'customer') {
							customer = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'disputed') {
							disputed = parser.getBooleanValue();
						} else if (text == 'invoice') {
							invoice = parser.getText();
						} else if (text == 'livemode') {
							livemode = parser.getBooleanValue();
						} else if (text == 'paid') {
							paid = parser.getBooleanValue();
						} else if (text == 'payment_intent') {
							payment_intent = parser.getText();
						} else if (text == 'payment_method') {
							payment_method = parser.getText();
						} else if (text == 'payment_method_details') {
							payment_method_details = new Payment_method_details(parser);
						} else if (text == 'receipt_url') {
							receipt_url = parser.getText();
						} else if (text == 'refunded') {
							refunded = parser.getBooleanValue();
						} else if (text == 'status') {
							status = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Card {
		public String brand {get;set;} 
		public String country {get;set;} 
		public Integer exp_month {get;set;} 
		public Integer exp_year {get;set;} 
		public String fingerprint {get;set;} 
		public String funding {get;set;} 
		public String last4 {get;set;} 
		public String network {get;set;} 
		
		public Card(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'brand') {
							brand = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'exp_month') {
							exp_month = parser.getIntegerValue();
						} else if (text == 'exp_year') {
							exp_year = parser.getIntegerValue();
						} else if (text == 'fingerprint') {
							fingerprint = parser.getText();
						} else if (text == 'funding') {
							funding = parser.getText();
						} else if (text == 'last4') {
							last4 = parser.getText();
						} else if (text == 'network') {
							network = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Card consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Payment_method_options {
		public Card card {get;set;} 

		public Payment_method_options(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'card') {
							card = new Card(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Payment_method_options consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data_Z {
		public String id {get;set;} 
		public String object_Z {get;set;} // in json: object
		public Integer amount {get;set;} 
		public Integer amount_capturable {get;set;} 
		public Integer amount_received {get;set;} 
		public String capture_method {get;set;} 
		public Charges charges {get;set;} 
		public String client_secret {get;set;} 
		public String confirmation_method {get;set;} 
		public Integer created {get;set;} 
		public String currency_Z {get;set;} // in json: currency
		public String customer {get;set;} 
		public String description {get;set;} 
		public String invoice {get;set;} 
		public Boolean livemode {get;set;} 
		public String payment_method {get;set;} 
		public Payment_method_options payment_method_options {get;set;} 
		public List<String> payment_method_types {get;set;} 
		public String status {get;set;} 
		
		public Data_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'object') {
							object_Z = parser.getText();
						} else if (text == 'amount') {
							amount = parser.getIntegerValue();
						} else if (text == 'amount_capturable') {
							amount_capturable = parser.getIntegerValue();
						} else if (text == 'amount_received') {
							amount_received = parser.getIntegerValue();
						} else if (text == 'capture_method') {
							capture_method = parser.getText();
						} else if (text == 'charges') {
							charges = new Charges(parser);
						} else if (text == 'client_secret') {
							client_secret = parser.getText();
						} else if (text == 'confirmation_method') {
							confirmation_method = parser.getText();
						} else if (text == 'created') {
							created = parser.getIntegerValue();
						} else if (text == 'currency') {
							currency_Z = parser.getText();
						} else if (text == 'customer') {
							customer = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'invoice') {
							invoice = parser.getText();
						} else if (text == 'livemode') {
							livemode = parser.getBooleanValue();
						} else if (text == 'payment_method') {
							payment_method = parser.getText();
						} else if (text == 'payment_method_options') {
							payment_method_options = new Payment_method_options(parser);
						} else if (text == 'payment_method_types') {
							payment_method_types = arrayOfString(parser);
						} else if (text == 'status') {
							status = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Data_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public static StripeGetPaymentIntentWrapper parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new StripeGetPaymentIntentWrapper(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	




    private static List<Data> arrayOfData(System.JSONParser p) {
        List<Data> res = new List<Data>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data(p));
        }
        return res;
    }



    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }









    private static List<Data_Z> arrayOfData_Z(System.JSONParser p) {
        List<Data_Z> res = new List<Data_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data_Z(p));
        }
        return res;
    }




}