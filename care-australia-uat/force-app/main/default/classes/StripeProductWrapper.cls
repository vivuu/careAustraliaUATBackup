//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class StripeProductWrapper {
    
    Public Class Metadata{
        public String sf_campaign_id;
        
        Public Metadata(JSONParser parser){
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'sf_campaign_id') {
							sf_campaign_id = parser.getText();
						}
                    }
                }
            }
        }
    }

	public class Object_Z {
		public String id {get;set;} 
		public String object_Z {get;set;} // in json: object
		public Boolean active {get;set;} 
		public Integer created {get;set;} 
		public String default_price {get;set;} 
		public Object description {get;set;} 
		public Boolean livemode {get;set;} 
		public Metadata metadata {get;set;} 
		public String name {get;set;} 
		public Object package_dimensions {get;set;} 
		public Object shippable {get;set;} 
		public Object statement_descriptor {get;set;} 
		public String tax_code {get;set;} 
		public String type {get;set;} 
		public Object unit_label {get;set;} 
		public Integer updated {get;set;} 
		public Object url {get;set;} 

		public Object_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'object') {
							object_Z = parser.getText();
						} else if (text == 'active') {
							active = parser.getBooleanValue();
						} else if (text == 'created') {
							created = parser.getIntegerValue();
						} else if (text == 'default_price') {
							default_price = parser.getText();
						} else if (text == 'description') {
							description = parser.readValueAs(Object.class);
						} else if (text == 'livemode') {
							livemode = parser.getBooleanValue();
						} else if (text == 'metadata') {
							metadata = new Metadata(parser);
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'package_dimensions') {
							package_dimensions = parser.readValueAs(Object.class);
						} else if (text == 'shippable') {
							shippable = parser.readValueAs(Object.class);
						} else if (text == 'statement_descriptor') {
							statement_descriptor = parser.readValueAs(Object.class);
						} else if (text == 'tax_code') {
							tax_code = parser.getText();
						} else if (text == 'type') {
							type = parser.getText();
						} else if (text == 'unit_label') {
							unit_label = parser.readValueAs(Object.class);
						} else if (text == 'updated') {
							updated = parser.getIntegerValue();
						} else if (text == 'url') {
							url = parser.readValueAs(Object.class);
						} else {
							System.debug(LoggingLevel.WARN, 'Object_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Request {
		public String id {get;set;} 
		public String idempotency_key {get;set;} 

		public Request(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'idempotency_key') {
							idempotency_key = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Request consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String id {get;set;} 
	public String object_Z {get;set;} // in json: object
	public String api_version {get;set;} 
	public Integer created {get;set;} 
	public Data data {get;set;} 
	public Boolean livemode {get;set;} 
	public Integer pending_webhooks {get;set;} 
	public Request request {get;set;} 
	public String type {get;set;} 

	public StripeProductWrapper(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'id') {
						id = parser.getText();
					} else if (text == 'object') {
						object_Z = parser.getText();
					} else if (text == 'api_version') {
						api_version = parser.getText();
					} else if (text == 'created') {
						created = parser.getIntegerValue();
					} else if (text == 'data') {
						data = new Data(parser);
					} else if (text == 'livemode') {
						livemode = parser.getBooleanValue();
					} else if (text == 'pending_webhooks') {
						pending_webhooks = parser.getIntegerValue();
					} else if (text == 'request') {
						request = new Request(parser);
					} else if (text == 'type') {
						type = parser.getText();
					} else {
						System.debug(LoggingLevel.WARN, 'StripeProductWrapper consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Data {
		public Object_Z object_Z {get;set;} // in json: object

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'object') {
							object_Z = new Object_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static StripeProductWrapper parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new StripeProductWrapper(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	





}